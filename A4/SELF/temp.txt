#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include "ext2.h"

unsigned char* disk;


int find_next_level(char* path, char* dir, int st_inx){
	if (path[st_inx]!='/') {return -1; 
		//if this is not a valid absolute path
	}
	else { // if path starts with / as abs path
		int i;
		for (i=st_inx+1; path[i]!='/' && path[i]!='\0'; i++ ){ 
		//search for /'s position and copy name over 
			dir[i-st_inx-1] = path[i];
		}
		dir[i-st_inx-1] ='\0'; 
  		return i;
	}

}
int find_inode_for_path(char* path, unsigned char *disk){
	int inode_idx;  //Start from root inode 
	int block_idx;
	struct ext2_inode* inode;
  	struct ext2_dir_entry* dir_ent;
  	
  	int name_idx = 0;
  	char* name = (char* )malloc(sizeof(char) * EXT2_NAME_LEN);
  	//Prepare data for structures
  	struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
    struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
    int inode_size = sb->s_inode_size;
    void* inode_table = disk + gc->bg_inode_table * 1024; 
  	char type;
  	
  	inode_idx = EXT2_ROOT_INO;
  	//printf("indoe count = %d\n",sb->s_inodes_count);
  	while (1) {

    inode = (struct ext2_inode*) (inode_table + (inode_idx - 1) * sizeof(struct ext2_inode));
    int total_size = inode->i_size;

    // printf("next: %s name: %s\n", query, name_buf);

    // hard set "" to represent "/"
    if (strcmp(path, "") == 0) {
      path[0] = '/';
      path[1] = '\0';
    }

    if (name_idx == strlen(path)) {
      return inode_idx - 1;
    }

    name_idx = find_next_level(path, name,name_idx);
  

    int curr_size = 0;
    int new_inode_num = -1;
    int block_num_idx = 0;
    block_idx = inode->i_block[block_num_idx];
    dir = (struct ext2_dir_entry*)(disk + EXT2_BLOCK_SIZE * block_idx);
    while (curr_size < total_size) {
      curr_size += dir->rec_len;
      if (dir->file_type == EXT2_FT_DIR) {
        if (strlen(name) == dir->name_len &&
            strncmp(name, dir->name, dir->name_len) == 0) {
          new_inode_num = dir->inode;
          break;
        }
      }
      dir = (void*)dir + dir->rec_len;
      if (curr_size % EXT2_BLOCK_SIZE == 0) { // need to use next pointer
        block_num_idx++;
        block_idx = inode->i_block[block_num_idx];
        dir = (struct ext2_dir_entry*)(disk + EXT2_BLOCK_SIZE * block_idx);
      }
    }

    if (new_inode_num == -1) {
      // printf("not found: %s\n", name_buf);
      return -1;
    } else {
      inode_idx = new_inode_num;
    }

  }
}


int main(int argc, char *argv[]){

	if(argc != 2) {
        fprintf(stderr, "Usage: %s <image file name>\n", argv[0]);
        exit(1);
    }
    int fd = open(argv[1], O_RDWR);

    disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if(disk == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }

	char * test_path = "/level1/level2";
	char * dir_name = (char*)malloc( sizeof(char)*128 );
	int result = 0;
	while (result!=strlen(test_path)){

		result = find_next_level(test_path,dir_name,result);
		printf("%s\n",dir_name);
	}
	
	printf("Find inode_idx as %d",find_inode_for_path(test_path, disk));
    return 0 ; 
	
}