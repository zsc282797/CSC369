#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <errno.h>
#include "ext2.h"
#include "helper.h"
#include <getopt.h>

unsigned char* disk;

int main(int argc, char **argv){
/*--------------- Book keeping variables---------------*/
	int block_freed = 0;  int symlink = 0; //This keeps track whether the link is symbolic   
	int inode_freed = 0;  int hardlink = 0;// This keeps track if the dir_ent is a hard link 
/*---------------  Handling of inputs -----------------*/
	//This does not support the -r tag for recursive delete
	if (argc != 3) {
    	fprintf(stderr, "Usage: ext2_rm <image file name> <file path to delete>\n");
		exit(EINVAL);
    }
/*--------------- Readin Path to delete -----------------*/
    char* rm_path = malloc(sizeof(char)*(strlen(argv[2])+1));
    strcpy(rm_path,argv[2]);
    char* rm_p_path = get_parent_path(rm_path);
    char* rm_name = get_actual_name(rm_path);
/*--------------- Loading image files -------------------*/
    	
  	int img_fd = open(argv[1], O_RDWR); //readin the image file for the disk 


  /* ----- Prepare the file system and get pointers to block ------- */
  	disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, img_fd, 0);
  	if (disk == MAP_FAILED) {
    	perror("mmap");
    	exit(1);
  	} //Code reused form Exercise starter code for reading disk img 
  	//Set up structs and pointers (Possible helper to reduce repeating ?)

	struct ext2_super_block *sb = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE);
    struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk+EXT2_BLOCK_SIZE*2);
    void* inode_table = disk + EXT2_BLOCK_SIZE* gc->bg_inode_table;

    //void* bitmap_inode = disk + EXT2_BLOCK_SIZE * gc->bg_inode_bitmap;
    void* bitmap_blcok = disk + EXT2_BLOCK_SIZE * gc->bg_block_bitmap;
    unsigned int inode_bitmap_offset = gc->bg_inode_bitmap;

  /* ---------- Checking for the rm path --------------*/ 
  	int file_inode_idx = find_inode_for_path(rm_path, disk);
  	if (file_inode_idx < 0) {// no inode found two situation can happen here, there is no file or it is a hardlink 
		//test if it is a hard link 
  		int rm_p_idx = find_inode_for_path(rm_p_path,disk);
  		if (rm_p_idx < 0) {
  			fprintf(stderr,"No file found to remove!\n"); exit(ENOENT);
	  	}
	  	struct ext2_inode * rm_p_inode = (struct ext2_inode*) (inode_table + sizeof(struct ext2_inode) * rm_p_idx );
	  	struct ext2_dir_entry* ln_blk = get_child_dirent(rm_p_inode, rm_name);
	  	if (ln_blk!=NULL){
	  		printf("Path is a hardlink\n");
	  	} 
	} 
	else { //an inode is found 
		struct ext2_inode * rm_file_inode = (struct ext2_inode *) (inode_table + sizeof(struct ext2_inode) * file_inode_idx);
		if (rm_file_inode -> i_mode == EXT2_FT_SYMLINK) {
			printf("Path is a symbolic link!\n");
		}
		else if (rm_file_inode -> i_mode == EXT2_FT_REG_FILE){
			printf("Path is a regular file");
		}
		else if (rm_file_inode -> i_mode == EXT2_FT_DIR){
			fprintf(stderr,"Cannot rm a direcotry: %s",rm_path);
			exit(EINVAL);
		}

	}

return 0;
}