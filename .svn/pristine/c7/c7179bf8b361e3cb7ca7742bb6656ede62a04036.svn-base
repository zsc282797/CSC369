#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <errno.h>
#include "ext2.h"
#include "helper.h"

unsigned char* disk;
int main(int argc, char **argv) {
    if (argc != 3) {
        fprintf(stderr, "Usage: ext2_restore <image file name> <absolute path to recover>\n");
        exit(1);
    }
     /*---------------  Handling of inputs -----------------*/
    char* path = malloc(sizeof(char)*(strlen(argv[2])+3));
    strcpy(path,"/.");
    strcat(path,argv[2]);
    char* p_path = get_parent_path(path);
    char* name = get_actual_name(path);

    /*--------------- Loading image files -------------------*/
    	
  	int img_fd = open(argv[1], O_RDWR); //readin the image file for the disk 


  	/* ----- Prepare the file system and get pointers to block ------- */
  	disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, img_fd, 0);
  	if (disk == MAP_FAILED) {
    	perror("mmap");
    	exit(1);
  	} //Code reused form Exercise starter code for reading disk img 
  	//Set up structs and pointers (Possible helper to reduce repeating ?)

	struct ext2_super_block *sb = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE);
    struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk+EXT2_BLOCK_SIZE*2);
    void* inode_table = disk + EXT2_BLOCK_SIZE* gc->bg_inode_table;

    //void* bitmap_inode = disk + EXT2_BLOCK_SIZE * gc->bg_inode_bitmap;
    void* bitmap_blcok = disk + EXT2_BLOCK_SIZE * gc->bg_block_bitmap;
    unsigned int inode_bitmap_offset = gc->bg_inode_bitmap;
    /* ------- Checking for restore path --------------*/
    int restore_inode_idx = find_inode_for_path(path, disk);
    if (restore_inode_idx > 0){
    	fprintf(stderr,"File already exists\n");
    	exit(EEXIST);
    }
    if (path[0]!='/'){
    	fprintf(stderr,"Please enter absolote path\n");
    	exit(EINVAL);
    }
    if (strlen(path)>1 && path[strlen(path)-1] == '/') {
		path[strlen(path)-1] = '\0';
    }
    printf("Path recover is %s\n",path);
    printf("Got actual name is %s\n",name);
    int restore_p_inx = find_inode_for_path(p_path, disk);
    struct ext2_inode* p_inode = (struct ext2_inode *)(inode_table + sizeof(struct ext2_inode) * restore_p_inx);

    struct ext2_dir_entry *dir_ent; //for reading every directory entry 
    struct ext2_dir_entry *gap_ent; //This is the found gap between 
    int actual_size;
    int i = 0;
    for (i=0;i<12;i++){
      if (p_inode->i_block[i] != 0 ) {
      dir_ent = (struct ext2_dir_entry *)(disk + p_inode->i_block[i] * EXT2_BLOCK_SIZE);
      int curr_size = 0;
      while (curr_size < EXT2_BLOCK_SIZE) { //walk throgh all the entries
        	curr_size += dir_ent->rec_len;
      		printf("Looking at: %s\n",dir_ent->name);
      		actual_size = padd_struct(sizeof (struct ext2_dir_entry) + dir_ent->name_len);
      		if (actual_size!=dir_ent->rec_len){
            printf("GAP found\n");
      			int gap = dir_ent->rec_len - actual_size;
      			gap_ent = (struct ext2_dir_entry *)((void*)dir_ent + actual_size);
            printf("Comapring ent->name:%s and name:%s\n",gap_ent->name, name);
      			if (strncmp (gap_ent->name, name, gap_ent->name_len) == 0){ //if gap entry has the name as we wanted 
      				printf("Found the deleted entry!\n");
      				if (gap_ent->inode == 0){
      					fprintf(stderr,"Inode was cleared \n");
      					exit(EINVAL);
      				}
      				if (gap_ent->file_type == EXT2_FT_DIR){
      					fprintf(stderr,"Pleae use -r for directory (NOT IMPELEMNTED!)\n");
      					exit(EINVAL);
      				}
      				if (check_dirty_blocks(gap_ent->inode)!=0){
      					fprintf(stderr, "blocks are overwritten!\n");
      					exit(EINVAL);
      				}
      				if (check_inode_bit(gap_ent->inode)!=0){
      					fprintf(stderr, "inode is overwritten\n");
      					exit(EINVAL);
      				}
      				//if all the check pass
      				mask_inode_bit(gap_ent->inode-1);
      				reset_blocks(gap_ent->inode);
      				struct ext2_inode * res_inode = (struct ext2_inode *)(inode_table + sizeof(struct ext2_inode) * (gap_ent->inode));
					res_inode->i_dtime = 0; //Reset the delete time 
      				dir_ent->rec_len = actual_size; // reveal the hidden gap entry 
      				sb-> s_free_inodes_count --;
      				gc->bg_free_inodes_count --;
      			}

      		}
        dir_ent = (struct ext2_dir_entry *)( (void*) dir_ent + dir_ent->rec_len );
      }
      }
    }



}