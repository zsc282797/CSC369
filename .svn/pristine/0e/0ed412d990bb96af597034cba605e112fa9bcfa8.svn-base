#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <errno.h>
#include "ext2.h"
#include "helper.h"

unsigned char* disk;
int main(int argc, char **argv) {
    if (argc != 3) {
        fprintf(stderr, "Usage: ext2_restore <image file name> <absolute path to recover>\n");
        exit(1);
    }
     /*---------------  Handling of inputs -----------------*/
    char* path = malloc(sizeof(char)*(strlen(argv[2])+1));
    strcpy(path,argv[2]);
    char* p_path = get_parent_path(path);
    char* name = get_actual_name(path);

    /*--------------- Loading image files -------------------*/
    	
  	int img_fd = open(argv[1], O_RDWR); //readin the image file for the disk 


  	/* ----- Prepare the file system and get pointers to block ------- */
  	disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, img_fd, 0);
  	if (disk == MAP_FAILED) {
    	perror("mmap");
    	exit(1);
  	} //Code reused form Exercise starter code for reading disk img 
  	//Set up structs and pointers (Possible helper to reduce repeating ?)

	struct ext2_super_block *sb = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE);
    struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk+EXT2_BLOCK_SIZE*2);
    void* inode_table = disk + EXT2_BLOCK_SIZE* gc->bg_inode_table;

    //void* bitmap_inode = disk + EXT2_BLOCK_SIZE * gc->bg_inode_bitmap;
    void* bitmap_blcok = disk + EXT2_BLOCK_SIZE * gc->bg_block_bitmap;
    unsigned int inode_bitmap_offset = gc->bg_inode_bitmap;
    /* ------- Checking for restore path --------------*/
    int restore_inode_idx = find_inode_for_path(path, disk);
    if (restore_inode_idx > 0){
    	fprintf(stderr,"File already exists\n");
    	exit(EEXIST);
    }
    if (path[0]!='/'){
    	fprintf(stderr,"Please enter absolote path\n");
    	exit(EINVAL);
    }
    if (strlen(path)>1 && path[strlen(path)-1] == '/') {
		path[strlen(path)-1] = '\0';
    }
    int restore_p_inx = find_inode_for_path(p_path, disk);
    struct ext2_inode* p_inode = (struct ext2_inode *)(inode_table + sizeof(struct ext2_inode) * restore_p_inx);

    struct ext2_dir_entry *dir_ent; //for reading every directory entry 
    struct ext2_dir_entry *gap_ent; //This is the found gap between 
    int i = 0;
    for (i=0;i<12;i++){
      dir_ent = (struct ext2_dir_entry *)(disk + p_inode->i_block[i] * EXT2_BLOCK_SIZE);
      int curr_size = 0;
      while (curr_size < EXT2_BLOCK_SIZE) { //walk throgh all the entries
        curr_size += dir_ent->rec_len;
      		printf("Looking at: %s\n",dir_ent->name);
      		printf("rec_len = %d\n",dir_ent->rec_len);  
        dir_ent = (struct ext2_dir_entry *)( (void*) dir_ent + dir_ent->rec_len );
      }
      
    }



}