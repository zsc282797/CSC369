#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include "ext2.h"


//These two values are the same from EX7,8,9
unsigned char* disk;

//This function used recursively would produce the name 
//of the directory at each level 
int find_next_level(char* path, char* dir, int st_inx){
	if (path[st_inx]!='/') {return -1; 
		//if this is not a valid absolute path
	}
	else { // if path starts with / as abs path
		int i;
		for (i=st_inx+1; path[i]!='/' && path[i]!='\0'; i++ ){ 
		//search for /'s position and copy name over 
			dir[i-st_inx-1] = path[i];
		}
		dir[i-st_inx-1] ='\0'; 
  		return i;
	}

}

//This function works with the above helper function 
//Given a path, return the inode number if found and 
//-ENOENT if not found 
int find_inode_for_path(char* path, unsigned char *disk){
	int inode_idx;  
	int block_idx;
	struct ext2_inode* inode;
  struct ext2_dir_entry* dir;
  	
  	int name_idx = 0;
  	char* name = (char* )malloc(sizeof(char) * EXT2_NAME_LEN);
  	//Prepare data for structures
  	struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
    struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
    int inode_size = sb->s_inode_size;
    void* inode_table = disk + gc->bg_inode_table * 1024; 
    inode_idx = EXT2_ROOT_INO;//start from the root node 
  	//printf("indoe count = %d\n",sb->s_inodes_count);
  	while (1) {

    inode = (struct ext2_inode*) (inode_table + (inode_idx - 1) * sizeof(struct ext2_inode));
    int total_size = inode->i_size;
    
    if (name_idx == strlen(path)) {
      return inode_idx - 1;
    } //finished search for all the levels 

    name_idx = find_next_level(path, name,name_idx);//Search down for one level
    
    int exceed = 0;
    int new_inode_idx = -1;
    int block_num = 0;
    block_idx = inode->i_block[block_num];
    dir = (struct ext2_dir_entry*)(disk + EXT2_BLOCK_SIZE * block_idx);
    while (exceed < total_size) {
      exceed += dir->rec_len;
      if (dir->file_type == EXT2_FT_DIR) {
        if (strcmp(name, dir->name) == 0) {
          new_inode_idx = dir->inode;
          break; //set the found inode as the next search root 
        }
      } //same idea as EX9 where we look for all the directory entries 
      dir = (void*)dir + dir->rec_len;
      if (exceed % EXT2_BLOCK_SIZE == 0) { //if exhast the block 
        block_num++; //move to the next block
        block_idx = inode->i_block[block_num];
        dir = (struct ext2_dir_entry*)(disk + EXT2_BLOCK_SIZE * block_idx);
      }
    }

    if (new_inode_idx < 0) {
      //If the new_inode_idx was never changed 
      return -2; //return not found error number
    } else {
      inode_idx = new_inode_idx;
    }

  }
}

char* get_parent_path(const char* path){
  int end=0;
  char * result = malloc(sizeof(char) * (strlen(path) + 1) );
  strcpy(result,path);
  for (end = strlen(result); end>=0; end--){
    if (result[end]=='/') break;
  }
 
  if (end == 0) return "/";
  else {
    result[end]='\0';
    return result;
  }
}
//this function returns the idx of the inode index starting from 0
//for the first free inode and if not found return -1 
int find_inode_bm(){

  struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
  struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
  int i; int j;
  for (i = 0; i < 4; i++){
      unsigned int bb = *(disk+ gc->bg_inode_bitmap * 1024 +i);
     for (j = 0; j < 8; j++){
      
        if ( ((bb>>j)&1) == 0){
          printf("Free Inode got is: %d", i*8 + j);
          return i*8 + j;
        }
      }
  }
  return -1;
}
//This is a useful helper to flatten the bitmap into an array 
//for easyier search for free blocks
unsigned * block_bm2array(){
  struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
  struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
  unsigned * blocks = (unsigned*) malloc(sizeof(unsigned) * sb->s_blocks_count);
  int i; int j;
  for (i = 0; i<16;i++){
    unsigned int bb = *(disk+ gc->bg_block_bitmap * 1024 +i);
    for (j=0;j<8;j++){
      blocks[i*8+j] = (bb>>j)&1;
    }
  }
  return blocks; 
}
//This helper function returns a array of indices to the free blocks
//if not enough blocks are found, return NULL
int* find_free_blocks(int size){
  struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
  struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
  int * blocks = (int* )malloc(sizeof(int)*(size+1));
  unsigned block_bits = sb->s_blocks_count;
  unsigned * b_bm = block_bm2array();
  int i; int found = 0;

  for (i = 0; i < block_bits; i++){
    if (b_bm[i]==0){
      printf("Found block index :%d\n",i);
      blocks[found] = i;
      found++;
    }
    if (found == size){return blocks; }
  }
  return NULL;
}
//This function padd the size of a struct 
int padd_struct(int size){
  if (size%4 == 0) 
    return size;
  else 
    return ((size / 4) +1)*4; 
}

void mask_block_bit(int block_idx){
  struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
  struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
  unsigned * b_byte = (unsigned *)(disk+ gc->bg_block_bitmap * 1024 + block_idx / 8);
  
  *b_byte = *b_byte | (1 << block_idx % 8); 
  
}

void mask_inode_bit(int inode_idx){
  struct ext2_group_desc *gc = (struct ext2_group_desc *)(disk + 2048);
  struct ext2_super_block *sb = (struct ext2_super_block *)(disk + 1024);
  unsigned * i_byte = (unsigned *)(disk+ gc->bg_inode_bitmap * 1024 + inode_idx/ 8);

  *i_byte = *i_byte | (1 << inode_idx % 8); 
}

char* get_actual_name(char* path){
  char* result = malloc(sizeof(char)*strlen(path));
  char* p_name = get_parent_path(path);
  int p_len = strlen(p_name);
  strncpy(result,&path[p_len+1],strlen(path)-p_len);
  return result;
}


/*
int main(int argc, char *argv[]){

	if(argc != 2) {
        fprintf(stderr, "Usage: %s <image file name>\n", argv[0]);
        exit(1);
    }
    int fd = open(argv[1], O_RDWR);

    disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if(disk == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }

	char * test_path = "/level1/level2/level3";
	char * dir_name = (char*)malloc( sizeof(char)*128 );
	int result = 0;
	while (result!=strlen(test_path)){

		result = find_next_level(test_path,dir_name,result);
		printf("%s\n",dir_name);
	}
	
	printf("Find inode_idx as %d\n",find_inode_for_path(test_path, disk));
    return 0 ; 
	
}*/
